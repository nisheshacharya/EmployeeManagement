{"ast":null,"code":"var _jsxFileName = \"D:\\\\practice\\\\projects\\\\JavaReact\\\\React-Hooks-Spring-Boot-CRUD-Full-Stack-App\\\\react-hooks-frontend\\\\src\\\\components\\\\PrivateRoute.js\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport AuthService from '../services/AuthService';\n\n// Protect routes using JWT token\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  return /*#__PURE__*/_jsxDEV(Route, {\n    ...rest,\n    render: props => {\n      const currentUser = AuthService.getCurrentUser();\n      if (!currentUser) {\n        // If no user is logged in, redirect to login page\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 28\n        }, this);\n      }\n      return /*#__PURE__*/_jsxDEV(Component, {\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 24\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n};\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","Route","Redirect","AuthService","jsxDEV","_jsxDEV","PrivateRoute","component","Component","rest","render","props","currentUser","getCurrentUser","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/practice/projects/JavaReact/React-Hooks-Spring-Boot-CRUD-Full-Stack-App/react-hooks-frontend/src/components/PrivateRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport AuthService from '../services/AuthService';\r\n\r\n// Protect routes using JWT token\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={props => {\r\n                const currentUser = AuthService.getCurrentUser();\r\n                if (!currentUser) {\r\n                    // If no user is logged in, redirect to login page\r\n                    return <Redirect to=\"/login\" />;\r\n                }\r\n                return <Component {...props} />;\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AAClD,OAAOC,WAAW,MAAM,yBAAyB;;AAEjD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAGA,CAAC;EAAEC,SAAS,EAAEC,SAAS;EAAE,GAAGC;AAAK,CAAC,KAAK;EACxD,oBACIJ,OAAA,CAACJ,KAAK;IAAA,GACEQ,IAAI;IACRC,MAAM,EAAEC,KAAK,IAAI;MACb,MAAMC,WAAW,GAAGT,WAAW,CAACU,cAAc,CAAC,CAAC;MAChD,IAAI,CAACD,WAAW,EAAE;QACd;QACA,oBAAOP,OAAA,CAACH,QAAQ;UAACY,EAAE,EAAC;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MACnC;MACA,oBAAOb,OAAA,CAACG,SAAS;QAAA,GAAKG;MAAK;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IACnC;EAAE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACC,EAAA,GAdIb,YAAY;AAgBlB,eAAeA,YAAY;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}