{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8080/api/v1/auth/';\nclass AuthService {\n  // Login request\n  login(username, password) {\n    return axios.post(API_URL + 'login', {\n      username,\n      password\n    }).then(response => {\n      if (response.data.token) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      return response.data;\n    });\n  }\n\n  // Sign-up request\n  signup(username, email, password) {\n    return axios.post(API_URL + 'signup', {\n      username,\n      email,\n      password\n    });\n  }\n\n  // Logout by removing JWT from local storage\n  logout() {\n    localStorage.removeItem('user');\n  }\n\n  // Get the current logged-in user\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user')); // Contains JWT token\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","API_URL","AuthService","login","username","password","post","then","response","data","token","localStorage","setItem","JSON","stringify","signup","email","logout","removeItem","getCurrentUser","parse","getItem"],"sources":["D:/practice/projects/JavaReact/React-Hooks-Spring-Boot-CRUD-Full-Stack-App/react-hooks-frontend/src/services/AuthService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8080/api/v1/auth/';\r\n\r\nclass AuthService {\r\n\r\n    // Login request\r\n    login(username, password) {\r\n        return axios\r\n            .post(API_URL + 'login', { username, password })\r\n            .then(response => {\r\n                if (response.data.token) {\r\n                    localStorage.setItem('user', JSON.stringify(response.data));\r\n                }\r\n                return response.data;\r\n            });\r\n    }\r\n\r\n    // Sign-up request\r\n    signup(username, email, password) {\r\n        return axios.post(API_URL + 'signup', {\r\n            username,\r\n            email,\r\n            password\r\n        });\r\n    }\r\n\r\n    // Logout by removing JWT from local storage\r\n    logout() {\r\n        localStorage.removeItem('user');\r\n    }\r\n\r\n    // Get the current logged-in user\r\n    getCurrentUser() {\r\n        return JSON.parse(localStorage.getItem('user'));  // Contains JWT token\r\n    }\r\n}\r\n\r\nexport default new AuthService();\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,oCAAoC;AAEpD,MAAMC,WAAW,CAAC;EAEd;EACAC,KAAKA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IACtB,OAAOL,KAAK,CACPM,IAAI,CAACL,OAAO,GAAG,OAAO,EAAE;MAAEG,QAAQ;MAAEC;IAAS,CAAC,CAAC,CAC/CE,IAAI,CAACC,QAAQ,IAAI;MACd,IAAIA,QAAQ,CAACC,IAAI,CAACC,KAAK,EAAE;QACrBC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC/D;MACA,OAAOD,QAAQ,CAACC,IAAI;IACxB,CAAC,CAAC;EACV;;EAEA;EACAM,MAAMA,CAACX,QAAQ,EAAEY,KAAK,EAAEX,QAAQ,EAAE;IAC9B,OAAOL,KAAK,CAACM,IAAI,CAACL,OAAO,GAAG,QAAQ,EAAE;MAClCG,QAAQ;MACRY,KAAK;MACLX;IACJ,CAAC,CAAC;EACN;;EAEA;EACAY,MAAMA,CAAA,EAAG;IACLN,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;EACnC;;EAEA;EACAC,cAAcA,CAAA,EAAG;IACb,OAAON,IAAI,CAACO,KAAK,CAACT,YAAY,CAACU,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAE;EACtD;AACJ;AAEA,eAAe,IAAInB,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}